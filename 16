<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Web Console Task Manager</title>
  <style>
    body {
      background: #1e1e1e;
      color: #dcdcdc;
      font-family: monospace;
      padding: 20px;
    }
    #console {
      border: 1px solid #444;
      padding: 10px;
      height: 400px;
      overflow-y: auto;
      white-space: pre-wrap;
      background: #111;
    }
    #input {
      width: 100%;
      background: #000;
      color: #0f0;
      border: none;
      padding: 10px;
      font-family: monospace;
      font-size: 16px;
    }
  </style>
</head>
<body>

<h2>Web Console Task Manager</h2>
<div id="console">Type `commands` to begin...</div>
<input id="input" type="text" placeholder="Type command here..." autofocus />

<script>
  const consoleDiv = document.getElementById('console');
  const input = document.getElementById('input');
  let currentUser = '';
  const users = JSON.parse(localStorage.getItem('users')) || {};

  const commands = {
    'commands': `Available commands:
- user [name]: switch/create user
- add [task name] [MM/DD/YYYY]
- list: show tasks
- fin [number]: finish task
- clear: clear screen`,

    'clear': () => {
      consoleDiv.innerText = '';
    }
  };

  function log(text) {
    consoleDiv.innerText += '\n' + text;
    consoleDiv.scrollTop = consoleDiv.scrollHeight;
  }

  function save() {
    localStorage.setItem('users', JSON.stringify(users));
  }

  input.addEventListener('keydown', function(e) {
    if (e.key === 'Enter') {
      const raw = input.value.trim();
      log(`> ${raw}`);
      input.value = '';

      const [cmd, ...args] = raw.split(' ');

      switch (cmd.toLowerCase()) {
        case 'commands':
        case 'clear':
          typeof commands[cmd] === 'function' ? commands[cmd]() : log(commands[cmd]);
          break;
        case 'user':
          const name = args[0];
          if (!name) return log("Usage: user [name]");
          currentUser = name;
          if (!users[currentUser]) users[currentUser] = { tasks: [] };
          save();
          log(`Switched to user: ${currentUser}`);
          break;
        case 'add':
          if (!currentUser) return log("Set a user first with `user [name]`");
          const taskName = args.slice(0, -1).join(' ');
          const dueDate = args[args.length - 1];
          if (!taskName || !dueDate) return log("Usage: add [task name] [MM/DD/YYYY]");
          users[currentUser].tasks.push({ name: taskName, dueDate });
          save();
          log(`Added: ${taskName} due on ${dueDate}`);
          break;
        case 'list':
          if (!currentUser || !users[currentUser].tasks.length) return log("No tasks.");
          users[currentUser].tasks.forEach((t, i) => {
            log(`${i + 1}. ${t.name} - due ${t.dueDate}`);
          });
          break;
        case 'fin':
          const idx = parseInt(args[0]) - 1;
          if (isNaN(idx) || !users[currentUser] || !users[currentUser].tasks[idx]) {
            return log("Invalid task number.");
          }
          const removed = users[currentUser].tasks.splice(idx, 1);
          save();
          log(`Removed: ${removed[0].name}`);
          break;
        default:
          log("Unknown command. Type `commands`.");
      }
    }
  });
</script>

</body>
</html>
